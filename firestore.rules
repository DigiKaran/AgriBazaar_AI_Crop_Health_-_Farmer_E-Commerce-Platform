rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper functions ---
    function isUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // CRITICAL FIX: The exists() check prevents errors if the rule is checked before the user's
      // profile document has been created, which resolves the race condition.
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isExpert() {
      // CRITICAL FIX: The exists() check is also added here for robustness.
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'expert';
    }

    // --- Rules for 'users' collection ---
    match /users/{userId} {
      allow get: if isAdmin() || isExpert() || isUser(userId);
      allow create: if isUser(userId);
      allow update: if isAdmin() || (isUser(userId) && request.resource.data.role == resource.data.role);
      allow delete: if isAdmin();
    }
    match /users {
      allow list: if isAdmin();
    }

    // --- Rules for 'products' and 'product_categories' ---
    match /{collection}/{docId} where collection in ['products', 'product_categories'] {
      allow read: if true;
      allow write: if isAdmin();
    }

    // --- Rules for 'diagnosis_history' collection ---
    match /diagnosis_history/{docId} {
      allow create: if isUser(request.resource.data.userId);
      allow read: if isAdmin() || isExpert() || isUser(resource.data.userId);
      allow update: if isAdmin() || isExpert() || isUser(resource.data.userId);
      allow delete: if isAdmin() || isUser(resource.data.userId);
    }
    match /diagnosis_history {
        // Allows admins/experts to query the whole collection.
        // Users can only query if they filter by their own userId.
       allow list: if isAdmin() || isExpert();
    }


    // --- Rules for 'chat_messages' collection ---
    match /chat_messages/{docId} {
      allow read, create: if isUser(request.resource.data.userId);
    }
     match /chat_messages {
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }

    // --- Rules for 'orders' collection ---
    match /orders/{orderId} {
      allow create: if isUser(request.resource.data.userId);
      allow read: if isAdmin() || isUser(resource.data.userId);
      allow update, delete: if isAdmin();
    }
    match /orders {
      allow list: if isAdmin();
    }
  }
}
